import operator
import numpy as np

path =[]

def redukcja(m):
    lb = 0
    for wiersz in range(len(m)):
        mw = min(m[wiersz,:])
        lb += mw
        m[wiersz,:] = m[wiersz,:] - mw

    for kol in range(len(m[0])):
        mk = min(m[:,kol])
        lb += mk
        m[:,kol] = m[:,kol] - mk
    return m,lb

def mincol(m,i,j):
    mi = np.inf
    for k in range(len(m)):
        if mi > m[k,j] and k != i:
            mi = m[k,j]
    return mi

def minrow(m,i,j):
    mi = np.inf
    for k in range(len(m)):
        if mi > m[i,k] and k != j:
            mi = m[i,k]
    return mi
def choose(m):
    global path
    tab = []
    for i in range(len(m)):
        for j in range(len(m[0])):
            if m[i][j] == 0:
                mk = mincol(m,i,j)
                mw = minrow(m,i,j)
                cost = mk + mw
                tab.append((i,j,cost))
                path.append((i,j))
    tab.sort(key=operator.itemgetter(2),reverse=True)
    return tab[0]

def update_matrix(m,data):
    global path
    x,y,cost = data
    m[x,:] = np.inf
    m[:,y] = np.inf



    exit = []
    enter =[]
    przejscie = []
    visited = 0
    exforb = -1
    enforb = -1

    for i in path:
        exit.append(i[0])
        enter.append(i[1])
    for i in exit:
        for j in enter:
            if i == j:
                przejscie.append(i)
    if len(przejscie) <len(m) - 2:
        for ex in exit:
            visited = 0
            for tr in przejscie:
                if ex == tr:
                    visited = 1
            if visited == 0:
                exforb = ex

        for ent in enter:
            visited = 0
            for tr in przejscie:
                if ent == tr:
                    visited = 1
            if visited == 0:
                enforb = ent
        m[enforb][exforb] = np.inf
    return m


m = [[np.inf,5,3],
     [5,np.inf,6],
     [6,4,np.inf]]
m = np.array(m)
m2 = redukcja(m)
print(m2[0])
print(choose(m2[0]))

